name: New release

on:
  workflow_dispatch:
    inputs:
      release-type:
        type: choice
        required: true
        default: patch
        description: Type of version bump
        options:
          - patch
          - minor
          - major

jobs:
  unit-test:
    runs-on: ubuntu-latest

    steps:
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: yarn install

      - name: Run tests
        run: yarn run test:unit

  benchmark:
    runs-on: ubuntu-latest

    steps:
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: yarn install

      - name: Run tests
        run: yarn run bench

  bump-version-and-publish:
    runs-on: ubuntu-latest
    needs: [unit-test, benchmark]

    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: "https://registry.npmjs.org"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: yarn install

      - name: Bump version
        id: bump-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          VERSION_PARTS=(${VERSION//./ })
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          if [ "${{ github.event.inputs.type }}" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "${{ github.event.inputs.type }}" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          jq '.version = $newVersion' --arg newVersion "$NEW_VERSION" package.json > package.json.tmp
          mv package.json.tmp package.json
          echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Build library
        run: yarn run build

      - name: Publish to NPM
        run: npm publish 
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Commit and push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Bump version to ${{steps.bump-version.outputs.NEW_VERSION}}" --quiet
          git push

  # create-github-release:
  #   runs-on: ubuntu-latest
  #   needs: [unit-test, benchmark]

  #   steps:

  # - name: Create GitHub release
  #   id: create_release
  #   uses: actions/create-release@v1
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
  #   with:
  #     tag_name: ${{ github.event.inputs.version }}
  #     release_name: Release ${{ github.event.inputs.version }}
  #     body: New release of the project.
  #     draft: false
  #     prerelease: false
